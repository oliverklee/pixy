package at.ac.tuwien.infosys.www.pixy.phpParser;

import java.util.*;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

public class PhpLexer implements java_cup.runtime.Scanner {

	public static final int YYEOF = -1;

	private static final int ZZ_BUFFERSIZE = 16384;

	public static final int ST_IN_SCRIPTING = 2;
	public static final int ST_NOWDOC = 10;
	public static final int ST_LOOKING_FOR_PROPERTY = 16;
	public static final int ST_SINGLE_QUOTE = 6;
	public static final int ST_ONE_LINE_COMMENT = 24;
	public static final int ST_COMMENT = 22;
	public static final int ST_BACKQUOTE = 8;
	public static final int ST_DOUBLE_QUOTES = 4;
	public static final int YYINITIAL = 0;
	public static final int ST_VAR_OFFSET = 20;
	public static final int ST_LOOKING_FOR_VARNAME = 18;
	public static final int ST_HEREDOC = 12;
	public static final int ST_END_HEREDOC = 14;

	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,
			11, 12, 12 };

	private static final String ZZ_CMAP_PACKED = "\11\0\1\12\1\13\2\0\1\11\22\0\1\12\1\46\1\72\1\100"
			+ "\1\65\1\52\1\53\1\77\1\62\1\63\1\50\1\45\1\57\1\4" + "\1\2\1\51\1\5\11\1\1\41\1\56\1\47\1\43\1\44\1\66"
			+ "\1\67\1\31\1\7\1\22\1\16\1\3\1\17\1\33\1\30\1\14" + "\1\71\1\32\1\26\1\35\1\21\1\23\1\36\1\42\1\25\1\24"
			+ "\1\15\1\20\1\40\1\27\1\6\1\34\1\10\1\60\1\70\1\61" + "\1\55\1\37\1\74\1\31\1\7\1\22\1\16\1\3\1\17\1\33"
			+ "\1\30\1\14\1\71\1\32\1\26\1\35\1\21\1\23\1\36\1\42" + "\1\25\1\76\1\15\1\20\1\40\1\27\1\6\1\34\1\10\1\73"
			+ "\1\54\1\75\1\64\201\10\uff00\0";

	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\1\14\0\2\1\1\2\1\3\1\4\1\5\1\6"
			+ "\1\3\3\5\1\7\21\5\1\10\1\11\1\12\1\13" + "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"
			+ "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" + "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"
			+ "\1\44\2\45\1\46\1\45\1\47\1\2\3\50\1\51" + "\1\52\3\53\1\54\1\55\1\56\1\57\1\60\2\61"
			+ "\1\62\1\2\3\63\2\64\2\63\1\0\2\65\1\1" + "\1\66\1\0\1\67\6\5\1\70\1\71\1\72\1\0"
			+ "\2\5\1\0\1\73\7\5\1\74\13\5\1\75\7\5" + "\1\76\7\5\1\77\1\100\1\101\1\102\1\103\1\104"
			+ "\1\105\1\106\1\107\1\106\1\110\1\0\1\111\1\112" + "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"
			+ "\12\0\1\123\2\0\1\124\2\0\1\123\1\125\1\126" + "\1\0\1\5\1\0\1\127\1\130\1\131\2\0\1\66"
			+ "\1\0\7\5\1\3\1\132\1\5\1\0\5\5\1\133" + "\3\5\1\134\2\5\1\135\1\5\1\136\1\137\15\5"
			+ "\1\140\14\5\1\141\1\142\1\143\1\144\1\145\2\0" + "\2\115\13\0\1\146\1\61\2\0\6\5\1\147\1\150"
			+ "\1\5\1\151\23\5\1\152\4\5\1\153\3\5\1\154" + "\14\5\21\0\1\5\1\155\5\5\1\156\1\157\3\5"
			+ "\1\160\1\5\1\161\2\5\1\162\2\5\1\163\2\5" + "\1\164\1\165\1\166\1\167\4\5\1\170\1\5\1\171"
			+ "\2\5\1\172\11\5\2\173\7\0\1\174\7\0\1\175" + "\2\65\1\0\2\5\1\176\2\5\1\177\12\5\1\200"
			+ "\1\201\1\202\2\5\1\203\1\204\11\5\5\0\1\205" + "\5\0\1\206\2\0\1\207\5\5\1\210\2\5\1\211"
			+ "\1\212\1\5\1\213\2\5\1\214\1\5\1\215\10\5" + "\4\0\1\216\1\0\1\217\1\0\3\5\1\220\4\5"
			+ "\1\221\1\5\1\222\1\5\1\223\1\5\1\224\3\5" + "\1\225\2\5\1\0\1\226\1\227\1\0\2\5\1\230"
			+ "\1\231\3\5\1\232\1\5\1\233\2\5\1\234\2\5" + "\1\0\1\235\1\236\1\5\1\237\1\240\4\5\1\241"
			+ "\1\0\5\5\1\0\1\242\1\243\1\244\2\5\1\0" + "\1\245\1\5\1\0\1\5\1\0\1\246\15\0";

	private static int[] zzUnpackAction() {
		int[] result = new int[583];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;
		int j = offset;
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"
			+ "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"
			+ "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"
			+ "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"
			+ "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"
			+ "\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"
			+ "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u03cf\0\u03cf"
			+ "\0\u03cf\0\u03cf\0\u0db6\0\u03cf\0\u03cf\0\u0df7\0\u0e38\0\u03cf"
			+ "\0\u03cf\0\u0e79\0\u03cf\0\u03cf\0\u03cf\0\u0eba\0\u03cf\0\u03cf"
			+ "\0\u0efb\0\u03cf\0\u0f3c\0\u0f7d\0\u0fbe\0\u03cf\0\u0efb\0\u0f3c"
			+ "\0\u03cf\0\u03cf\0\u03cf\0\u0efb\0\u0f3c\0\u03cf\0\u03cf\0\u0fff"
			+ "\0\u03cf\0\u1040\0\u1081\0\u10c2\0\u03cf\0\u0df7\0\u1103\0\u1144"
			+ "\0\u1185\0\u11c6\0\u03cf\0\u03cf\0\u1207\0\u1248\0\u1289\0\u12ca"
			+ "\0\u130b\0\u134c\0\u138d\0\u03cf\0\u13ce\0\u140f\0\u1450\0\u1491"
			+ "\0\u14d2\0\u1513\0\u03cf\0\u03cf\0\u03cf\0\u1554\0\u1595\0\u15d6"
			+ "\0\u1617\0\u05d7\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"
			+ "\0\u17de\0\u05d7\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"
			+ "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u05d7\0\u1aea\0\u1b2b"
			+ "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u05d7\0\u1cb1\0\u1cf2"
			+ "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u03cf\0\u1e78\0\u03cf"
			+ "\0\u03cf\0\u1eb9\0\u03cf\0\u03cf\0\u1efa\0\u03cf\0\u03cf\0\u1f3b"
			+ "\0\u1f7c\0\u03cf\0\u03cf\0\u03cf\0\u03cf\0\u1fbd\0\u03cf\0\u03cf"
			+ "\0\u03cf\0\u03cf\0\u03cf\0\u1ffe\0\u0db6\0\u203f\0\u2080\0\u20c1"
			+ "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u0e79\0\u2288"
			+ "\0\u03cf\0\u0eba\0\u22c9\0\u230a\0\u03cf\0\u03cf\0\u234b\0\u03cf"
			+ "\0\u238c\0\u03cf\0\u03cf\0\u03cf\0\u23cd\0\u240e\0\u244f\0\u244f"
			+ "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u1554"
			+ "\0\u05d7\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"
			+ "\0\u05d7\0\u281e\0\u285f\0\u28a0\0\u05d7\0\u28e1\0\u2922\0\u2963"
			+ "\0\u29a4\0\u05d7\0\u05d7\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9"
			+ "\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1"
			+ "\0\u05d7\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8"
			+ "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u05d7\0\u03cf\0\u03cf"
			+ "\0\u03cf\0\u03cf\0\u303e\0\u307f\0\u30c0\0\u03cf\0\u3101\0\u3142"
			+ "\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a"
			+ "\0\u338b\0\u03cf\0\u238c\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0"
			+ "\0\u3511\0\u3552\0\u3593\0\u05d7\0\u35d4\0\u3615\0\u05d7\0\u3656"
			+ "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e"
			+ "\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66"
			+ "\0\u3aa7\0\u3ae8\0\u05d7\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u05d7"
			+ "\0\u3c2d\0\u3c6e\0\u3caf\0\u05d7\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"
			+ "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb"
			+ "\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3"
			+ "\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb"
			+ "\0\u440c\0\u444d\0\u05d7\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592"
			+ "\0\u05d7\0\u05d7\0\u45d3\0\u4614\0\u4655\0\u05d7\0\u4696\0\u05d7"
			+ "\0\u46d7\0\u4718\0\u05d7\0\u4759\0\u479a\0\u05d7\0\u47db\0\u481c"
			+ "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u485d\0\u489e\0\u48df\0\u4920"
			+ "\0\u05d7\0\u4961\0\u05d7\0\u49a2\0\u49e3\0\u05d7\0\u4a24\0\u4a65"
			+ "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d"
			+ "\0\u03cf\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34"
			+ "\0\u03cf\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb"
			+ "\0\u03cf\0\u503c\0\u03cf\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181"
			+ "\0\u51c2\0\u05d7\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348"
			+ "\0\u5389\0\u53ca\0\u540b\0\u544c\0\u05d7\0\u05d7\0\u05d7\0\u548d"
			+ "\0\u54ce\0\u05d7\0\u05d7\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613"
			+ "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"
			+ "\0\u585c\0\u03cf\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u03cf"
			+ "\0\u59e2\0\u5a23\0\u05d7\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68"
			+ "\0\u5ba9\0\u5bea\0\u5c2b\0\u05d7\0\u05d7\0\u5c6c\0\u05d7\0\u5cad"
			+ "\0\u5cee\0\u5d2f\0\u5d70\0\u05d7\0\u5db1\0\u5df2\0\u5e33\0\u5e74"
			+ "\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9\0\u5ffa\0\u603b\0\u607c"
			+ "\0\u03cf\0\u60bd\0\u03cf\0\u60fe\0\u613f\0\u6180\0\u61c1\0\u05d7"
			+ "\0\u6202\0\u6243\0\u6284\0\u62c5\0\u05d7\0\u6306\0\u05d7\0\u6347"
			+ "\0\u05d7\0\u6388\0\u05d7\0\u63c9\0\u640a\0\u644b\0\u05d7\0\u648c"
			+ "\0\u64cd\0\u650e\0\u03cf\0\u03cf\0\u654f\0\u6590\0\u65d1\0\u05d7"
			+ "\0\u05d7\0\u6612\0\u6653\0\u6694\0\u05d7\0\u66d5\0\u05d7\0\u6716"
			+ "\0\u6757\0\u05d7\0\u6798\0\u67d9\0\u681a\0\u05d7\0\u05d7\0\u685b"
			+ "\0\u05d7\0\u05d7\0\u689c\0\u68dd\0\u691e\0\u695f\0\u05d7\0\u69a0"
			+ "\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26\0\u05d7\0\u05d7"
			+ "\0\u05d7\0\u6b67\0\u6ba8\0\u6be9\0\u05d7\0\u6c2a\0\u6c6b\0\u6cac"
			+ "\0\u6ced\0\u05d7\0\u6d2e\0\u6d6f\0\u6db0\0\u6df1\0\u6e32\0\u6e73"
			+ "\0\u6eb4\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9\0\u703a";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[583];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;
		int j = offset;
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\47\16\1\17\31\16\1\20\1\21\1\22\1\23\1\24"
			+ "\1\25\1\26\1\27\1\30\3\31\1\32\1\33\1\34" + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"
			+ "\1\45\1\30\1\46\1\30\1\47\2\30\1\50\1\51" + "\1\52\1\53\1\30\1\54\1\55\1\56\1\57\1\60"
			+ "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70" + "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"
			+ "\1\101\1\30\1\102\1\103\1\104\1\105\1\42\1\106" + "\1\107\65\110\1\111\4\110\1\112\1\113\5\110\70\114"
			+ "\1\115\6\114\1\112\1\114\65\116\1\117\5\116\1\120"
			+ "\1\121\4\116\101\122\65\123\1\124\5\123\1\125\5\123"
			+ "\101\126\3\127\1\130\2\127\3\130\3\127\25\130\1\127"
			+ "\1\130\26\127\1\130\4\127\1\130\2\127\3\131\1\132" + "\2\131\3\132\3\131\25\132\1\131\1\132\26\131\1\132"
			+ "\4\131\1\132\2\131\1\20\1\133\1\20\1\30\1\20" + "\1\134\3\30\3\20\25\30\1\20\1\30\15\20\1\71"
			+ "\1\135\3\20\1\136\3\20\1\30\4\20\1\30\2\20" + "\50\137\1\140\30\137\11\141\1\142\1\141\1\143\30\141"
			+ "\1\144\5\141\1\145\13\141\1\145\12\141\47\16\1\146" + "\100\16\1\0\2\16\1\147\13\16\1\150\7\16\1\151"
			+ "\2\16\102\0\1\21\1\152\1\153\1\0\1\21\74\0" + "\1\152\3\0\1\152\35\0\1\154\36\0\1\30\1\0"
			+ "\1\30\1\0\1\30\1\155\2\30\3\0\5\30\1\156" + "\1\157\3\30\1\160\6\30\1\161\2\30\1\162\1\0"
			+ "\1\30\26\0\1\30\4\0\1\30\6\0\1\163\36\0" + "\1\164\1\165\35\0\1\21\1\152\1\153\1\0\1\21"
			+ "\1\166\73\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\7\30\1\167\15\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\11\30\1\170\13\30\1\0\1\30\4\0\1\171\21\0"
			+ "\1\30\1\102\3\0\1\30\1\106\2\0\1\30\1\0" + "\1\30\1\0\4\30\3\0\25\30\1\0\1\30\26\0"
			+ "\1\30\4\0\1\30\13\0\3\31\66\0\1\30\1\0" + "\1\30\1\0\4\30\3\0\3\30\1\172\1\30\1\173"
			+ "\2\30\1\174\10\30\1\175\3\30\1\0\1\30\26\0" + "\1\30\4\0\1\174\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\11\30\1\176\2\30\1\177\10\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\200\1\0\4\30\3\0\1\201\6\30\1\202\15\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\1\203\3\30\1\204" + "\2\30\1\205\15\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\5\30\1\206\2\30\1\207\14\30\1\0\1\30\26\0"
			+ "\1\30\4\0\1\207\3\0\1\30\1\0\1\210\1\0" + "\4\30\3\0\15\30\1\211\7\30\1\0\1\30\26\0"
			+ "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0" + "\4\30\3\0\3\30\1\212\3\30\1\213\2\30\1\214"
			+ "\2\30\1\215\7\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\11\30\1\216\13\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\1\30\1\217\11\30\1\220\11\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\221\1\0"
			+ "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\1\222\24\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\14\30"
			+ "\1\223\10\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\2\30\1\224\1\30"
			+ "\3\0\5\30\1\225\2\30\1\226\1\227\13\30\1\0" + "\1\30\26\0\1\30\4\0\1\226\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\7\30\1\230\2\30\1\231" + "\12\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"
			+ "\1\30\1\0\1\30\1\0\4\30\3\0\4\30\1\232" + "\4\30\1\233\13\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\23\30\1\234\1\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\15\30\1\235\7\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\43\0\1\236\102\0\1\237\1\240\77\0\1\241" + "\1\242\77\0\1\243\1\0\1\244\76\0\1\245\100\0"
			+ "\1\246\1\247\2\0\1\250\1\0\1\251\72\0\1\252" + "\100\0\1\253\4\0\1\254\1\107\72\0\1\255\1\256"
			+ "\77\0\1\257\7\0\1\260\70\0\1\261\10\0\1\262" + "\67\0\1\263\44\0\1\264\2\0\1\265\1\0\1\266"
			+ "\1\0\1\267\1\270\1\271\2\0\1\272\1\273\1\274" + "\3\0\1\275\44\0\1\273\5\0\1\276\2\0\3\276"
			+ "\3\0\25\276\1\0\1\276\26\0\1\276\4\0\1\276" + "\46\0\1\256\34\0\65\277\1\0\2\277\1\300\1\277"
			+ "\1\301\6\277\70\302\1\303\6\302\1\301\1\302\3\0" + "\1\304\2\0\3\304\3\0\25\304\1\0\1\304\26\0"
			+ "\1\304\1\0\1\305\2\0\1\304\67\0\1\306\13\0" + "\70\114\1\307\6\114\1\0\71\114\1\310\6\114\1\310"
			+ "\1\114\1\0\1\130\1\0\1\130\1\0\4\130\3\0" + "\25\130\1\0\1\130\26\0\1\130\4\0\1\130\3\0"
			+ "\1\132\1\0\1\132\1\0\4\132\3\0\25\132\1\0" + "\1\132\26\0\1\132\4\0\1\132\3\0\1\133\3\0"
			+ "\1\133\74\0\1\133\3\0\1\133\1\311\72\0\50\137" + "\1\0\30\137\51\0\1\312\27\0\11\141\1\0\1\141"
			+ "\1\0\30\141\1\0\5\141\1\0\13\141\1\0\12\141" + "\13\0\1\143\131\0\1\313\34\0\47\16\1\0\2\16"
			+ "\1\0\13\16\1\0\7\16\1\0\2\16\43\0\1\314" + "\73\0\1\315\4\0\1\314\57\0\1\316\57\0\1\152"
			+ "\1\0\1\153\1\0\1\152\74\0\1\317\2\0\1\320" + "\1\317\37\0\1\320\34\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\1\321\1\322\23\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\2\30\1\323\22\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\14\30\1\324\10\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\10\30\1\325\14\30\1\0\1\30\26\0" + "\1\30\4\0\1\325\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\22\30\1\326\2\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\15\30\1\327\7\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\330\1\0\1\330\1\0"
			+ "\1\330\1\0\1\330\6\0\2\330\2\0\1\330\6\0" + "\1\330\50\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\11\30\1\331\13\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\332\1\0\4\30\3\0"
			+ "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\51\0" + "\1\333\32\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\1\30\1\334\4\30\1\335\1\30\1\336\14\30\1\0" + "\1\30\26\0\1\30\4\0\1\336\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\10\30\1\337\14\30\1\0" + "\1\30\26\0\1\30\4\0\1\337\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\22\30\1\340\2\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\20\30\1\341\4\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\11\30\1\342\13\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\3\30\1\343\2\30\1\344" + "\16\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"
			+ "\1\30\1\0\1\345\1\0\4\30\3\0\25\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\5\30\1\346\17\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\5\30\1\347\17\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\11\30\1\350\13\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\10\30\1\351\14\30\1\0" + "\1\30\26\0\1\30\4\0\1\351\3\0\1\30\1\0"
			+ "\1\352\1\0\4\30\3\0\25\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\13\30\1\353\11\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\21\30\1\354\3\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\4\30\1\204\20\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\5\30\1\355\17\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\7\30\1\356\5\30\1\357\7\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\1\30\1\360\6\30\1\361" + "\14\30\1\0\1\30\26\0\1\30\4\0\1\361\3\0"
			+ "\1\30\1\0\1\30\1\0\4\30\3\0\15\30\1\362" + "\7\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"
			+ "\1\30\1\0\1\30\1\0\4\30\3\0\1\363\24\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\1\30\1\364\23\30" + "\1\0\1\365\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\10\30\1\366\14\30" + "\1\0\1\30\26\0\1\30\4\0\1\366\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\1\367\24\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\10\30\1\370\14\30\1\0" + "\1\30\26\0\1\30\4\0\1\370\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\2\30\1\371\22\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\11\30\1\372\13\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\1\30\1\373\23\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\7\30\1\374\15\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\2\30\1\375\1\30\3\0\25\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\1\376\6\30\1\377\15\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\3\30\1\u0100\1\30" + "\1\u0101\1\u0102\3\30\1\u0103\1\30\1\u0104\4\30\1\u0105"
			+ "\3\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\11\30\1\u0106"
			+ "\13\30\1\0\1\30\26\0\1\30\4\0\1\30\45\0" + "\1\u0107\100\0\1\u0108\100\0\1\u0109\100\0\1\u010a\3\0"
			+ "\1\u010b\55\0\1\u010c\51\0\1\u010c\13\0\1\u010d\1\0"
			+ "\1\u010e\101\0\1\u010f\6\0\1\u0110\76\0\1\u0111\102\0"
			+ "\1\u0112\103\0\1\u0113\73\0\1\u0114\66\0\1\u0115\106\0"
			+ "\1\u0116\66\0\1\u0117\122\0\1\u0118\54\0\1\276\1\0" + "\1\276\1\0\4\276\3\0\25\276\1\0\1\276\26\0"
			+ "\1\276\4\0\1\276\2\0\13\277\1\0\65\277\13\302" + "\1\0\65\302\1\0\1\304\1\0\1\304\1\u0119\4\304"
			+ "\3\0\25\304\1\0\1\304\15\0\1\u011a\10\0\1\304" + "\4\0\1\304\2\0\70\114\1\0\6\114\1\0\1\114"
			+ "\1\0\1\u011b\1\0\1\u011b\1\0\1\u011b\1\0\1\u011b" + "\6\0\2\u011b\2\0\1\u011b\6\0\1\u011b\77\0\1\u011c"
			+ "\75\0\1\u011d\54\0\1\317\3\0\1\317\74\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\1\30\1\345\23\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\u011e\1\0\4\30\3\0\25\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\1\u011f\1\30\1\u0120\1\u0121\4\30"
			+ "\1\u0122\2\30\1\u0123\11\30\1\0\1\30\26\0\1\30" + "\4\0\1\u0122\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\7\30\1\u0124\15\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\u0125\1\0\4\30"
			+ "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"
			+ "\1\u0126\23\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"
			+ "\1\u0127\12\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\15\30"
			+ "\1\u0128\7\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\51\0\1\u010b\32\0\1\30\1\0\1\u0129\1\0\4\30"
			+ "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"
			+ "\1\u012a\12\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"
			+ "\1\u012b\23\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\u012c\1\0\4\30\3\0\25\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\12\30\1\u012d\12\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\7\30\1\u012e\15\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\15\30\1\u012f\7\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\12\30\1\u0130\12\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\15\30\1\u0131\7\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\6\30\1\u0132\16\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\u0133\1\0\4\30\3\0\25\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u0134" + "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\u0135\1\0\4\30" + "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30" + "\1\u0136\6\30\1\u0137\14\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\u0137\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\5\30\1\u0138\17\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\10\30\1\u0139\14\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\u0139\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\6\30\1\u013a\16\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\u013b\1\0\4\30" + "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30" + "\1\u013c\23\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30" + "\1\u013d\23\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\4\30" + "\1\u013e\20\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\4\30" + "\1\u013f\20\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30" + "\1\u0140\23\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30" + "\1\u0141\12\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30" + "\1\u0142\23\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\15\30" + "\1\u0143\7\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\7\30" + "\1\u0144\15\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\2\30\1\u0145\1\30" + "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30" + "\1\u0146\12\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30" + "\1\u0147\16\30\1\u0148\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\1\30\1\u0149\23\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\1\u014a\3\30\1\u014b\20\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\15\30\1\u014c\7\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\12\30\1\u014d\12\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\1\u014e\24\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\15\30\1\u014f\7\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\u0150\1\0\4\30\3\0" + "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\5\0"
			+ "\1\u0151\2\0\3\u0151\1\0\1\u010b\1\0\25\u0151\1\0"
			+ "\1\u0151\26\0\1\u0151\1\u0152\3\0\1\u0151\1\u0153\23\0"
			+ "\1\u0154\71\0\1\u010e\106\0\1\u0155\102\0\1\u0156\72\0"
			+ "\1\u0157\103\0\1\u0158\103\0\1\u0159\101\0\1\u015a\51\0"
			+ "\1\u015a\73\0\1\u015b\34\0\1\u015c\104\0\1\u015d\74\0"
			+ "\1\u015e\117\0\1\u015f\72\0\1\u0160\56\0\1\u0161\65\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\5\30\1\u0162"
			+ "\17\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\3\30\1\u0163"
			+ "\21\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\u0164\1\0\4\30\3\0\25\30\1\0"
			+ "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0" + "\1\30\1\0\4\30\3\0\7\30\1\u0165\15\30\1\0"
			+ "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0" + "\1\30\1\0\4\30\3\0\13\30\1\u0166\11\30\1\0"
			+ "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0" + "\1\30\1\0\4\30\3\0\14\30\1\u0167\10\30\1\0"
			+ "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0" + "\1\30\1\0\4\30\3\0\1\u0168\24\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\20\30\1\u0169\4\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\16\30\1\u016a\6\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\11\30\1\u016b\13\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\4\30\1\u016c\20\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\15\30\1\u016d\7\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\1\30\1\u016e\23\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u016f" + "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\13\30\1\u0170\11\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\4\30\1\u0171\20\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\15\30\1\u0172\7\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\12\30\1\u0173\12\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\1\30\1\u0174\23\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\15\30\1\u0175\7\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\1\30\1\u0176\23\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\10\30\1\u0177\14\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\u0177\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\1\u0178\24\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\1\30\1\u0179\23\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\u017a\1\0\4\30\3\0" + "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"
			+ "\1\30\1\0\1\30\1\0\4\30\3\0\10\30\1\u017b" + "\14\30\1\0\1\30\26\0\1\30\4\0\1\u017b\3\0"
			+ "\1\30\1\0\1\30\1\0\4\30\3\0\14\30\1\u017c" + "\10\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0"
			+ "\1\30\1\0\1\30\1\0\4\30\3\0\1\u017d\24\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\6\30\1\u017e\16\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\11\30\1\u017f\13\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\1\u0180\24\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\u0181\1\0\4\30\3\0\25\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\11\30\1\u0182\13\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\20\30\1\u0183\4\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\15\30\1\u0184\7\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\1\u0185\24\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\1\30\1\u0186\23\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\15\30\1\u0187\7\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\u0188\1\0\4\30"
			+ "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"
			+ "\1\u0189\12\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"
			+ "\1\u018a\17\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\21\30"
			+ "\1\u018b\3\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\15\30"
			+ "\1\u018c\7\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"
			+ "\1\u018d\17\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"
			+ "\1\u018e\12\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"
			+ "\1\u018f\23\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\u0151\1\0\1\u0151\1\0\4\u0151\1\u0190\1\0"
			+ "\1\u0191\25\u0151\1\0\1\u0151\26\0\1\u0151\4\0\1\u0151"
			+ "\5\0\1\u0192\2\0\3\u0192\3\0\25\u0192\1\0\1\u0192" + "\26\0\1\u0192\4\0\1\u0192\5\0\1\u0193\2\0\3\u0193"
			+ "\3\0\25\u0193\1\0\1\u0193\26\0\1\u0193\4\0\1\u0193"
			+ "\27\0\1\u0194\104\0\1\u0195\75\0\1\u0196\55\0\1\u0197"
			+ "\6\0\1\u0198\50\0\1\u0199\24\0\1\u019a\122\0\1\u019b"
			+ "\52\0\1\u019c\100\0\1\u019d\111\0\1\u019e\112\0\1\u019f"
			+ "\103\0\1\u01a0\52\0\1\u01a1\2\0\3\u01a1\3\0\25\u01a1"
			+ "\1\0\1\u01a1\26\0\1\u01a1\4\0\1\u01a1\13\0\1\u01a2" + "\2\u01a3\123\0\1\u01a4\43\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\2\30\1\u01a5\22\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\6\30\1\u01a6\16\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\11\30\1\u01a7\13\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\1\u01a8\24\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\1\u01a9\24\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\3\30\1\u01aa\21\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\3\30\1\u01ab\21\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\2\30\1\u01ac\22\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\5\30\1\u01ad\17\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\21\30\1\u01ae\3\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\12\30\1\u01af\12\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\11\30\1\u01b0\13\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\1\u01b1\24\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"
			+ "\1\u01b2\16\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\22\30"
			+ "\1\u01b3\2\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"
			+ "\1\u01b4\17\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"
			+ "\1\u01b5\16\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\14\30"
			+ "\1\u01b6\10\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\5\30"
			+ "\1\u01b7\17\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\11\30"
			+ "\1\u01b8\13\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\15\30"
			+ "\1\u01b9\7\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\12\30"
			+ "\1\u01ba\12\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"
			+ "\1\u01bb\16\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30"
			+ "\1\u01bc\23\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"
			+ "\1\u01bd\16\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\u01be\1\0\4\30\3\0\25\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\6\30\1\u01bf\16\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\u01c0\1\0\4\30\3\0\25\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\10\30\1\u01c1\14\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\u01c1\3\0\1\30\1\0\1\u01c2" + "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\1\30\1\u01c3\23\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\14\30\1\u01c4\10\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\15\0\1\u0191\66\0\1\u0192\1\0\1\u0192" + "\1\0\4\u0192\3\0\25\u0192\1\0\1\u0192\26\0\1\u0192"
			+ "\1\u01c5\3\0\1\u0192\3\0\1\u0193\1\0\1\u0193\1\0" + "\4\u0193\3\0\25\u0193\1\0\1\u0193\26\0\1\u0193\4\0"
			+ "\1\u0193\1\u01c5\15\0\1\u01c6\111\0\1\u01c7\56\0\1\u01c8"
			+ "\6\0\1\u01c9\50\0\1\u01ca\50\0\1\u01cb\57\0\1\u0198"
			+ "\50\0\1\u0199\43\0\1\u01cc\67\0\1\u019f\100\0\1\u01cd"
			+ "\105\0\1\u01ce\77\0\1\u01cf\71\0\1\u019f\50\0\1\u01d0"
			+ "\51\0\1\u01d1\57\0\1\u01a3\102\0\1\u01d2\64\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\10\30\1\u01d3\14\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\u01d3\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\12\30\1\u01d4\12\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\u01d5\1\0\4\30\3\0\25\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\1\30\1\u01d6\23\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\12\30\1\u01d7\12\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\15\30\1\u01d8\7\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u01d9" + "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\6\30\1\u01da\16\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\u01db\1\0\4\30" + "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\1\30" + "\1\u01dc\23\30\1\0\1\30\26\0\1\30\4\0\1\30"
			+ "\3\0\1\30\1\0\1\u01dd\1\0\4\30\3\0\25\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\7\30\1\u01de\15\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\14\30\1\u01df\10\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\15\30\1\u01e0\7\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\30\1\0\4\30\3\0\4\30\1\u01e1\20\30" + "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30"
			+ "\1\0\1\u01e2\1\0\4\30\3\0\25\30\1\0\1\30" + "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30"
			+ "\1\0\4\30\3\0\6\30\1\u01e3\16\30\1\0\1\30" + "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u01e4"
			+ "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\1\30\1\u01e5\23\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\23\30\1\u01e6\1\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\1\30\1\u01e7\23\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\10\30\1\u01e8\14\30\1\0\1\30\26\0\1\30" + "\4\0\1\u01e8\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\10\30\1\u01e9\14\30\1\0\1\30\26\0\1\30" + "\4\0\1\u01e9\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\23\30\1\u01ea\1\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\23\30\1\u01eb\1\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\7\30\1\u01ec\15\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\13\0\1\u0190\1\0\1\u0191\123\0\1\u01ed"
			+ "\76\0\1\u01ee\75\0\1\u01ef\61\0\1\u01c9\50\0\1\u01ca"
			+ "\20\0\1\u01f0\100\0\1\u019f\107\0\1\u01cd\50\0\1\u01f1"
			+ "\32\0\1\u01f2\116\0\1\u01ee\57\0\1\u01d1\50\0\1\u01f3" + "\26\0\3\u01f4\66\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\15\30\1\u01f5\7\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\15\30\1\u01f6\7\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\6\30\1\u01f7\16\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\u01f8\1\0\4\30"
			+ "\3\0\25\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\6\30"
			+ "\1\u01f9\16\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\30\1\0\4\30\3\0\23\30"
			+ "\1\u01fa\1\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\3\0\1\30\1\0\1\u01fb\1\0\4\30\3\0\25\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\5\30\1\u01fc\17\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\5\30\1\u01fd\17\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\30\1\0\4\30\3\0\6\30\1\u01fe\16\30"
			+ "\1\0\1\30\26\0\1\30\4\0\1\30\3\0\1\30" + "\1\0\1\u01ff\1\0\4\30\3\0\25\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\23\30\1\u0200\1\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\30" + "\1\0\4\30\3\0\1\30\1\u0201\23\30\1\0\1\30"
			+ "\26\0\1\30\4\0\1\30\3\0\1\30\1\0\1\u0202" + "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\23\30\1\u0203\1\30\1\0\1\30\26\0\1\30"
			+ "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30" + "\3\0\1\u0204\24\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\22\30\1\u0205\2\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\23\30\1\u0206\1\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\23\30\1\u0207\1\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\6\30\1\u0208\16\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0" + "\2\30\1\u0209\22\30\1\0\1\30\26\0\1\30\4\0"
			+ "\1\30\17\0\1\u020a\75\0\1\u01ee\50\0\1\u020b\36\0"
			+ "\1\u01c9\104\0\1\u0198\65\0\1\u01f2\50\0\1\u020c\26\0" + "\3\u01f4\12\0\1\u020d\53\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\11\30\1\u020e\13\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\6\30\1\u020f\16\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\14\30\1\u0210\10\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\u0211\1\0"
			+ "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\7\30\1\u0212\15\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\7\30\1\u0213\15\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\1\30\1\u0214\23\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\u0215\1\0\4\30\3\0"
			+ "\25\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u0216"
			+ "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\2\30\1\u0217"
			+ "\22\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u0218"
			+ "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\15\30\1\u0219"
			+ "\7\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\23\30\1\u021a"
			+ "\1\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\7\30\1\u021b"
			+ "\15\30\1\0\1\30\26\0\1\30\4\0\1\30\3\0" + "\1\30\1\0\1\30\1\0\4\30\3\0\23\30\1\u021c"
			+ "\1\30\1\0\1\30\26\0\1\30\4\0\1\30\13\0" + "\3\u020a\30\0\1\256\65\0\1\u021d\50\0\1\30\1\0"
			+ "\1\u021e\1\0\4\30\3\0\25\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\14\30\1\u021f\10\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\5\30\1\u0220\17\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\3\30\1\u0221\21\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\10\30\1\u0222\14\30\1\0\1\30\26\0" + "\1\30\4\0\1\u0222\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\5\30\1\u0223\17\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\5\30\1\u0224\17\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\6\30\1\u0225\16\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\21\30\1\u0226\3\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\23\30\1\u0227\1\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\23\0\1\u0228\60\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\6\30\1\u0229\16\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\6\30\1\u022a\16\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\30\1\0\4\30\3\0\23\30\1\u022b\1\30\1\0" + "\1\30\26\0\1\30\4\0\1\30\3\0\1\30\1\0"
			+ "\1\u022c\1\0\4\30\3\0\25\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\30\1\0"
			+ "\4\30\3\0\22\30\1\u022d\2\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\35\0\1\u022e\46\0\1\30\1\0"
			+ "\1\u022f\1\0\4\30\3\0\25\30\1\0\1\30\26\0" + "\1\30\4\0\1\30\3\0\1\30\1\0\1\u0230\1\0"
			+ "\4\30\3\0\25\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\23\30\1\u0231\1\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\23\30\1\u0232\1\30\1\0\1\30\26\0\1\30\4\0" + "\1\30\3\0\1\30\1\0\1\30\1\0\4\30\3\0"
			+ "\1\u0233\24\30\1\0\1\30\26\0\1\30\4\0\1\30" + "\22\0\1\u0234\61\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\23\30\1\u0235\1\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\3\0\1\30\1\0\1\30\1\0\4\30"
			+ "\3\0\12\30\1\u0236\12\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\33\0\1\u0237\50\0\1\30\1\0\1\u0238"
			+ "\1\0\4\30\3\0\25\30\1\0\1\30\26\0\1\30" + "\4\0\1\30\35\0\1\u0239\46\0\1\30\1\0\1\30"
			+ "\1\0\4\30\3\0\11\30\1\u023a\13\30\1\0\1\30" + "\26\0\1\30\4\0\1\30\5\0\1\u023b\106\0\3\u023b"
			+ "\27\0\1\u023c\46\0\3\u023c\22\0\1\u023d\33\0\1\u023e"
			+ "\4\0\1\u023f\31\0\1\u0240\106\0\1\u0241\100\0\1\u0242"
			+ "\100\0\1\u0243\72\0\1\u0244\100\0\1\u0245\61\0\3\u0243"
			+ "\30\0\1\u01a3\72\0\1\u0246\100\0\1\u0247\134\0\1\u0243" + "\105\0\1\u0243\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[28795];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;
		int j = offset;
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\1\14\0\2\1\1\11\46\1\4\11\1\1\2\11"
			+ "\2\1\2\11\1\1\3\11\1\1\2\11\1\1\1\11" + "\3\1\1\11\2\1\3\11\2\1\2\11\1\1\1\11"
			+ "\3\1\1\11\5\1\2\11\1\1\1\0\4\1\1\0" + "\1\11\6\1\3\11\1\0\2\1\1\0\44\1\1\11"
			+ "\1\1\2\11\1\1\2\11\1\1\2\11\1\1\1\0" + "\4\11\1\1\5\11\12\0\1\1\2\0\1\11\2\0"
			+ "\1\1\2\11\1\0\1\11\1\0\3\11\2\0\1\1" + "\1\0\12\1\1\0\53\1\4\11\2\0\1\1\1\11"
			+ "\13\0\1\11\1\1\2\0\63\1\21\0\57\1\1\11" + "\7\0\1\11\7\0\1\11\1\1\1\11\1\0\40\1"
			+ "\5\0\1\11\5\0\1\11\2\0\32\1\4\0\1\11" + "\1\0\1\11\1\0\25\1\1\0\2\11\1\0\17\1"
			+ "\1\0\12\1\1\0\5\1\1\0\5\1\1\0\2\1" + "\1\0\1\1\1\0\1\1\15\0";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[583];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;
		int j = offset;
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	private java.io.Reader zzReader;

	private int zzState;

	private int zzLexicalState = YYINITIAL;

	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	private int zzMarkedPos;

	private int zzCurrentPos;

	private int zzStartRead;

	private int zzEndRead;

	private int yyline;

	@SuppressWarnings("unused")
	private int yychar;

	private int yycolumn;

	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	private boolean zzAtEOF;

	private boolean zzEOFDone;

	private StringBuffer morePrefix;
	@SuppressWarnings("unused")
	private boolean clearMorePrefix;
	public ArrayList<Comment> comments;

	public void registerComment() {
		Comment c = new Comment(yyline + 1, yycolumn, getFileName(), text());

		comments.add(c);
	}

	public void cleanMore() {
		this.morePrefix.setLength(0);
		this.clearMorePrefix = true;
	}

	public void more() {
		this.morePrefix.append(this.yytext());
		this.clearMorePrefix = false;
	}

	public final String text() {
		return (this.morePrefix.toString() + this.yytext());
	}

	public final int length() {
		return this.morePrefix.length() + this.yylength();
	}

	public final char charat(int pos) {
		if (pos < this.morePrefix.length()) {
			return this.morePrefix.charAt(pos);
		} else {
			return this.yycharat(pos - this.morePrefix.length());
		}
	}

	public Symbol lex() throws java.io.IOException {
		Symbol ret = this.next_token();
		this.morePrefix.setLength(0);
		this.clearMorePrefix = true;
		return ret;
	}

	@SuppressWarnings("rawtypes")
	private LinkedList stateStack;
	private String heredocLabel;
	private String fileName;

	@SuppressWarnings("unchecked")
	private void pushState(int state) {
		this.stateStack.add(new Integer(this.yystate()));
		yybegin(state);
	}

	private void popState() {
		yybegin(((Integer) this.stateStack.removeLast()).intValue());
	}

	@SuppressWarnings("unused")
	private int topState() {
		return ((Integer) this.stateStack.getLast()).intValue();
	}

	private Symbol symbol(int type, String name) {
		return symbol(type, name, text());
	}

	private Symbol symbol(int type, String name, String content) {

		int line = yyline + 1;
		return new ComplexSymbol(name, type, new ParseNode(type, name, content, line, yycolumn, getFileName()));
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	public String getFileName() {
		if (this.fileName == null) {
			throw new RuntimeException("fileName not set in lexer object");
		}
		return this.fileName;
	}

	public boolean isLabelStart(char c) {
		return ((c) >= 'a' && (c) <= 'z') || ((c) >= 'A' && (c) <= 'Z') || (c) == '_' || (c) >= 0x7F;
	}

	@SuppressWarnings("rawtypes")
	public PhpLexer(java.io.Reader in) {
		this.stateStack = new LinkedList();
		this.comments = new ArrayList<Comment>();
		this.morePrefix = new StringBuffer();
		this.clearMorePrefix = true;

		this.zzReader = in;
	}

	public PhpLexer(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0;
		int j = 0;
		while (i < 190) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	private boolean zzRefill() throws java.io.IOException {

		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		if (zzCurrentPos >= zzBuffer.length) {
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead > 0) {
			zzEndRead += numRead;
			return false;
		}
		if (numRead == 0) {
			int c = zzReader.read();
			if (c == -1) {
				return true;
			} else {
				zzBuffer[zzEndRead++] = (char) c;
				return false;
			}
		}
		return true;
	}

	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true;
		zzEndRead = zzStartRead;

		if (zzReader != null)
			zzReader.close();
	}

	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	public final int yystate() {
		return zzLexicalState;
	}

	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR) {
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 146: {
				return symbol(PhpSymbols.T_CONTINUE, "T_CONTINUE");
			}
			case 167:
				break;
			case 21: {
				return symbol(PhpSymbols.T_COMMA, "T_COMMA");
			}
			case 168:
				break;
			case 149: {
				return symbol(PhpSymbols.T_LINE, "T_LINE");
			}
			case 169:
				break;
			case 155: {
				return symbol(PhpSymbols.T_PROTECTED, "T_PROTECTED");
			}
			case 170:
				break;
			case 131: {
				return symbol(PhpSymbols.T_GLOBAL, "T_GLOBAL");
			}
			case 171:
				break;
			case 51: {
				more();
			}
			case 172:
				break;
			case 67: {
				return symbol(PhpSymbols.T_SR, "T_SR");
			}
			case 173:
				break;
			case 134: {
				return symbol(PhpSymbols.T_DOUBLE_CAST, "T_DOUBLE_CAST");
			}
			case 174:
				break;
			case 113: {
				return symbol(PhpSymbols.T_THROW, "T_THROW");
			}
			case 175:
				break;
			case 5: {
				return symbol(PhpSymbols.T_STRING, "T_STRING");
			}
			case 176:
				break;
			case 152: {
				return symbol(PhpSymbols.T_ENDSWITCH, "T_ENDSWITCH");
			}
			case 177:
				break;
			case 95: {
				return symbol(PhpSymbols.T_NEW, "T_NEW");
			}
			case 178:
				break;
			case 102: {
				yypushback(1);
				pushState(ST_VAR_OFFSET);
				return symbol(PhpSymbols.T_VARIABLE, "T_VARIABLE");
			}
			case 179:
				break;
			case 141: {
				return symbol(PhpSymbols.T_PRIVATE, "T_PRIVATE");
			}
			case 180:
				break;
			case 79: {
				return symbol(PhpSymbols.T_BOOLEAN_AND, "T_BOOLEAN_AND");
			}
			case 181:
				break;
			case 14: {
				return symbol(PhpSymbols.T_MULT, "T_MULT");
			}
			case 182:
				break;
			case 138: {
				return symbol(PhpSymbols.T_DECLARE, "T_DECLARE");
			}
			case 183:
				break;
			case 49: {
				return symbol(PhpSymbols.T_NUM_STRING, "T_NUM_STRING");
			}
			case 184:
				break;
			case 44: {
				zzMarkedPos += this.heredocLabel.length() - 1;
				yybegin(ST_IN_SCRIPTING);
				return symbol(PhpSymbols.T_END_HEREDOC, "T_END_HEREDOC");
			}
			case 185:
				break;
			case 150: {
				return symbol(PhpSymbols.T_STRING_CAST, "T_STRING_CAST");
			}
			case 186:
				break;
			case 94: {
				return symbol(PhpSymbols.T_USE, "T_USE");
			}
			case 187:
				break;
			case 115: {
				return symbol(PhpSymbols.T_UNSET, "T_UNSET");
			}
			case 188:
				break;
			case 162: {
				return symbol(PhpSymbols.T_INCLUDE_ONCE, "T_INCLUDE_ONCE");
			}
			case 189:
				break;
			case 129: {
				return symbol(PhpSymbols.T_SWITCH, "T_SWITCH");
			}
			case 190:
				break;
			case 121: {
				return symbol(PhpSymbols.T_ARRAY, "T_ARRAY");
			}
			case 191:
				break;
			case 34: {
				popState();
				return symbol(PhpSymbols.T_CLOSE_CURLY_BRACES, "T_CLOSE_CURLY_BRACES");
			}
			case 192:
				break;
			case 101: {
				return symbol(PhpSymbols.T_SL_EQUAL, "T_SL_EQUAL");
			}
			case 193:
				break;
			case 160: {
				return symbol(PhpSymbols.T_IMPLEMENTS, "T_IMPLEMENTS");
			}
			case 194:
				break;
			case 50: {
				popState();
				return symbol(PhpSymbols.T_CLOSE_RECT_BRACES, "T_CLOSE_RECT_BRACES");
			}
			case 195:
				break;
			case 2: {
				System.err.println("read ANY_CHAR at wrong place (state=" + yystate() + "):");
				System.err.println("line " + yyline + ", column " + yycolumn);
				System.err.println("character: " + text());
				return null;
			}
			case 196:
				break;
			case 23: {
				return symbol(PhpSymbols.T_CLOSE_RECT_BRACES, "T_CLOSE_RECT_BRACES");
			}
			case 197:
				break;
			case 81: {
				return symbol(PhpSymbols.T_BOOLEAN_OR, "T_BOOLEAN_OR");
			}
			case 198:
				break;
			case 45: {
				yypushback(length());
				popState();
			}
			case 199:
				break;
			case 7: {
			}
			case 200:
				break;
			case 86: {
				pushState(ST_IN_SCRIPTING);
				yypushback(1);
				return symbol(PhpSymbols.T_CURLY_OPEN, "T_CURLY_OPEN");
			}
			case 201:
				break;
			case 92: {
				return symbol(PhpSymbols.T_EXIT, "T_EXIT");
			}
			case 202:
				break;
			case 154: {
				return symbol(PhpSymbols.T_NAMESPACE, "T_NAMESPACE");
			}
			case 203:
				break;
			case 117: {
				return symbol(PhpSymbols.T_CLONE, "T_CLONE");
			}
			case 204:
				break;
			case 165: {
				return symbol(PhpSymbols.T_NS_C, "T_NS_C");
			}
			case 205:
				break;
			case 110: {
				return symbol(PhpSymbols.T_EMPTY, "T_EMPTY");
			}
			case 206:
				break;
			case 24: {
				return symbol(PhpSymbols.T_OPEN_BRACES, "T_OPEN_BRACES");
			}
			case 207:
				break;
			case 83: {
				return symbol(PhpSymbols.T_VARIABLE, "T_VARIABLE");
			}
			case 208:
				break;
			case 19: {
				return symbol(PhpSymbols.T_BITWISE_XOR, "T_BITWISE_XOR");
			}
			case 209:
				break;
			case 32: {
				pushState(ST_IN_SCRIPTING);
				return symbol(PhpSymbols.T_OPEN_CURLY_BRACES, "T_OPEN_CURLY_BRACES");
			}
			case 210:
				break;
			case 163: {
				return symbol(PhpSymbols.T_REQUIRE_ONCE, "T_REQUIRE_ONCE");
			}
			case 211:
				break;
			case 140: {
				return symbol(PhpSymbols.T_REQUIRE, "T_REQUIRE");
			}
			case 212:
				break;
			case 31: {
				yybegin(ST_DOUBLE_QUOTES);
				return symbol(PhpSymbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
			}
			case 213:
				break;
			case 22: {
				return symbol(PhpSymbols.T_OPEN_RECT_BRACES, "T_OPEN_RECT_BRACES");
			}
			case 214:
				break;
			case 116: {
				return symbol(PhpSymbols.T_CONST, "T_CONST");
			}
			case 215:
				break;
			case 43: {
				if (zzMarkedPos > zzEndRead) {
					return null;
				}

				zzMarkedPos--;

				scanner: while (zzMarkedPos < zzEndRead) {
					switch (zzBuffer[zzMarkedPos++]) {
					case '\r':
						if (zzBuffer[zzMarkedPos] == '\n') {
							zzMarkedPos++;
						}
					case '\n':
						String label = "";
						int pos = zzMarkedPos;
						while (pos < zzEndRead && isLabelStart(zzBuffer[pos])) {
							label = label + zzBuffer[pos];
							pos++;
						}

						if (label.equals(this.heredocLabel)) {
							if (pos < zzEndRead && zzBuffer[pos] == ';') {
								pos++;
							}

							if (zzBuffer[pos] == '\r' || zzBuffer[pos] == '\n') {
								yybegin(ST_END_HEREDOC);
								break scanner;
							}
						}
						zzMarkedPos = pos;

						continue;
					case '$':
						if (isLabelStart(zzBuffer[zzMarkedPos]) || zzBuffer[zzMarkedPos] == '{') {
							break;
						}
						continue;
					case '{':
						if (zzBuffer[zzMarkedPos] == '$') {
							break;
						}
						continue;
					case '\\':
						if (zzMarkedPos < zzEndRead && zzBuffer[zzMarkedPos] != '\n' && zzBuffer[zzMarkedPos] != '\r') {
							zzMarkedPos++;
						}
					default:
						continue;
					}

					zzMarkedPos--;
					break;
				}
				return symbol(PhpSymbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
			}
			case 216:
				break;
			case 41: {
				yybegin(ST_IN_SCRIPTING);
				return symbol(PhpSymbols.T_BACKTICK, "T_BACKTICK");
			}
			case 217:
				break;
			case 128: {
				return symbol(PhpSymbols.T_STATIC, "T_STATIC");
			}
			case 218:
				break;
			case 1: {
				return symbol(PhpSymbols.T_INLINE_HTML, "T_INLINE_HTML");
			}
			case 219:
				break;
			case 57: {
				return symbol(PhpSymbols.T_MINUS_EQUAL, "T_MINUS_EQUAL");
			}
			case 220:
				break;
			case 28: {
				return symbol(PhpSymbols.T_QUESTION, "T_QUESTION");
			}
			case 221:
				break;
			case 62: {
				return symbol(PhpSymbols.T_AS, "T_AS");
			}
			case 222:
				break;
			case 72: {
				return symbol(PhpSymbols.T_SL, "T_SL");
			}
			case 223:
				break;
			case 78: {
				return symbol(PhpSymbols.T_AND_EQUAL, "T_AND_EQUAL");
			}
			case 224:
				break;
			case 144: {
				return symbol(PhpSymbols.T_ENDWHILE, "T_ENDWHILE");
			}
			case 225:
				break;
			case 84: {
				return symbol(PhpSymbols.T_CONSTANT_ENCAPSED_STRING, "T_CONSTANT_ENCAPSED_STRING", text());
			}
			case 226:
				break;
			case 137: {
				return symbol(PhpSymbols.T_DEFAULT, "T_DEFAULT");
			}
			case 227:
				break;
			case 151: {
				return symbol(PhpSymbols.T_OBJECT_CAST, "T_OBJECT_CAST");
			}
			case 228:
				break;
			case 25: {
				return symbol(PhpSymbols.T_CLOSE_BRACES, "T_CLOSE_BRACES");
			}
			case 229:
				break;
			case 158: {
				return symbol(PhpSymbols.T_ENDFOREACH, "T_ENDFOREACH");
			}
			case 230:
				break;
			case 148: {
				return symbol(PhpSymbols.T_FILE, "T_FILE");
			}
			case 231:
				break;
			case 120: {
				return symbol(PhpSymbols.T_WHILE, "T_WHILE");
			}
			case 232:
				break;
			case 76: {
				return symbol(PhpSymbols.T_MOD_EQUAL, "T_MOD_EQUAL");
			}
			case 233:
				break;
			case 46: {
				popState();
				return symbol(PhpSymbols.T_STRING, "T_STRING");
			}
			case 234:
				break;
			case 119: {
				return symbol(PhpSymbols.T_CATCH, "T_CATCH");
			}
			case 235:
				break;
			case 97: {
				return symbol(PhpSymbols.T_VAR, "T_VAR");
			}
			case 236:
				break;
			case 112: {
				return symbol(PhpSymbols.T_ISSET, "T_ISSET");
			}
			case 237:
				break;
			case 39: {
				return symbol(PhpSymbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
			}
			case 238:
				break;
			case 47: {
				yypushback(length());
				popState();
				pushState(ST_IN_SCRIPTING);
			}
			case 239:
				break;
			case 6: {
				return symbol(PhpSymbols.T_MINUS, "T_MINUS");
			}
			case 240:
				break;
			case 12: {
				return symbol(PhpSymbols.T_NOT, "T_NOT");
			}
			case 241:
				break;
			case 109: {
				return symbol(PhpSymbols.T_ENDIF, "T_ENDIF");
			}
			case 242:
				break;
			case 59: {
				return symbol(PhpSymbols.T_IF, "T_IF");
			}
			case 243:
				break;
			case 60: {
				return symbol(PhpSymbols.T_DO, "T_DO");
			}
			case 244:
				break;
			case 106: {
				return symbol(PhpSymbols.T_CASE, "T_CASE");
			}
			case 245:
				break;
			case 132: {
				return symbol(PhpSymbols.T_PUBLIC, "T_PUBLIC");
			}
			case 246:
				break;
			case 16: {
				return symbol(PhpSymbols.T_MODULO, "T_MODULO");
			}
			case 247:
				break;
			case 98: {
				return symbol(PhpSymbols.T_IS_IDENTICAL, "T_IS_IDENTICAL");
			}
			case 248:
				break;
			case 52: {
				registerComment();
				cleanMore();
				yybegin(ST_IN_SCRIPTING);
			}
			case 249:
				break;
			case 33: {
				yybegin(ST_BACKQUOTE);
				return symbol(PhpSymbols.T_BACKTICK, "T_BACKTICK");
			}
			case 250:
				break;
			case 48: {
				popState();
				pushState(ST_IN_SCRIPTING);
				return symbol(PhpSymbols.T_STRING_VARNAME, "T_STRING_VARNAME");
			}
			case 251:
				break;
			case 130: {
				return symbol(PhpSymbols.T_RETURN, "T_RETURN");
			}
			case 252:
				break;
			case 36: {
				yybegin(ST_ONE_LINE_COMMENT);
				more();
			}
			case 253:
				break;
			case 139: {
				return symbol(PhpSymbols.T_FOREACH, "T_FOREACH");
			}
			case 254:
				break;
			case 30: {
				return symbol(PhpSymbols.T_NS_SEPARATOR, "T_NS_SEPARATOR");
			}
			case 255:
				break;
			case 96: {
				return symbol(PhpSymbols.T_LOGICAL_AND, "T_LOGICAL_AND");
			}
			case 256:
				break;
			case 64: {
				return symbol(PhpSymbols.T_IS_EQUAL, "T_IS_EQUAL");
			}
			case 257:
				break;
			case 65: {
				return symbol(PhpSymbols.T_DOUBLE_ARROW, "T_DOUBLE_ARROW");
			}
			case 258:
				break;
			case 35: {
				yybegin(ST_SINGLE_QUOTE);
				return symbol(PhpSymbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
			}
			case 259:
				break;
			case 18: {
				return symbol(PhpSymbols.T_BITWISE_OR, "T_BITWISE_OR");
			}
			case 260:
				break;
			case 3: {
				return symbol(PhpSymbols.T_LNUMBER, "T_LNUMBER");
			}
			case 261:
				break;
			case 74: {
				return symbol(PhpSymbols.T_DIV_EQUAL, "T_DIV_EQUAL");
			}
			case 262:
				break;
			case 73: {
				return symbol(PhpSymbols.T_MUL_EQUAL, "T_MUL_EQUAL");
			}
			case 263:
				break;
			case 69: {
				return symbol(PhpSymbols.T_INC, "T_INC");
			}
			case 264:
				break;
			case 142: {
				return symbol(PhpSymbols.T_UNSET_CAST, "T_UNSET_CAST");
			}
			case 265:
				break;
			case 133: {
				return symbol(PhpSymbols.T_BOOL_CAST, "T_BOOL_CAST");
			}
			case 266:
				break;
			case 13: {
				return symbol(PhpSymbols.T_IS_SMALLER, "T_IS_SMALLER");
			}
			case 267:
				break;
			case 145: {
				return symbol(PhpSymbols.T_FUNCTION, "T_FUNCTION");
			}
			case 268:
				break;
			case 125: {
				yypushback(3);
				pushState(ST_LOOKING_FOR_PROPERTY);
				return symbol(PhpSymbols.T_VARIABLE, "T_VARIABLE");
			}
			case 269:
				break;
			case 89: {
				yybegin(ST_IN_SCRIPTING);
			}
			case 270:
				break;
			case 53: {
				yybegin(ST_IN_SCRIPTING);
			}
			case 271:
				break;
			case 29: {
				return symbol(PhpSymbols.T_AT, "T_AT");
			}
			case 272:
				break;
			case 10: {
				return symbol(PhpSymbols.T_IS_GREATER, "T_IS_GREATER");
			}
			case 273:
				break;
			case 99: {
				return symbol(PhpSymbols.T_SR_EQUAL, "T_SR_EQUAL");
			}
			case 274:
				break;
			case 135: {
				return symbol(PhpSymbols.T_EXTENDS, "T_EXTENDS");
			}
			case 275:
				break;
			case 20: {
				return symbol(PhpSymbols.T_SEMICOLON, "T_SEMICOLON");
			}
			case 276:
				break;
			case 85: {
				pushState(ST_LOOKING_FOR_VARNAME);
				return symbol(PhpSymbols.T_DOLLAR_OPEN_CURLY_BRACES, "T_DOLLAR_OPEN_CURLY_BRACES");
			}
			case 277:
				break;
			case 111: {
				return symbol(PhpSymbols.T_BREAK, "T_BREAK");
			}
			case 278:
				break;
			case 15: {
				return symbol(PhpSymbols.T_DIV, "T_DIV");
			}
			case 279:
				break;
			case 105: {
				return symbol(PhpSymbols.T_EVAL, "T_EVAL");
			}
			case 280:
				break;
			case 107: {
				return symbol(PhpSymbols.T_LIST, "T_LIST");
			}
			case 281:
				break;
			case 122: {
				return symbol(PhpSymbols.T_PRINT, "T_PRINT");
			}
			case 282:
				break;
			case 66: {
				return symbol(PhpSymbols.T_IS_GREATER_OR_EQUAL, "T_IS_GREATER_OR_EQUAL");
			}
			case 283:
				break;
			case 38: {
				yybegin(ST_IN_SCRIPTING);
				return symbol(PhpSymbols.T_DOUBLE_QUOTE, "T_DOUBLE_QUOTE");
			}
			case 284:
				break;
			case 55: {
				return symbol(PhpSymbols.T_CONCAT_EQUAL, "T_CONCAT_EQUAL");
			}
			case 285:
				break;
			case 63: {
				return symbol(PhpSymbols.T_DOUBLE_COLON, "T_DOUBLE_COLON");
			}
			case 286:
				break;
			case 58: {
				pushState(ST_LOOKING_FOR_PROPERTY);
				return symbol(PhpSymbols.T_OBJECT_OPERATOR, "T_OBJECT_OPERATOR");
			}
			case 287:
				break;
			case 153: {
				return symbol(PhpSymbols.T_INTERFACE, "T_INTERFACE");
			}
			case 288:
				break;
			case 77: {
				yybegin(YYINITIAL);
				return symbol(PhpSymbols.T_SEMICOLON, "T_SEMICOLON");
			}
			case 289:
				break;
			case 108: {
				return symbol(PhpSymbols.T_GOTO, "T_GOTO");
			}
			case 290:
				break;
			case 91: {
				return symbol(PhpSymbols.T_TRY, "T_TRY");
			}
			case 291:
				break;
			case 159: {
				return symbol(PhpSymbols.T_INSTANCEOF, "T_INSTANCEOF");
			}
			case 292:
				break;
			case 26: {
				return symbol(PhpSymbols.T_BITWISE_NOT, "T_BITWISE_NOT");
			}
			case 293:
				break;
			case 93: {
				return symbol(PhpSymbols.T_FOR, "T_FOR");
			}
			case 294:
				break;
			case 127: {
				return symbol(PhpSymbols.T_ELSEIF, "T_ELSEIF");
			}
			case 295:
				break;
			case 87: {
				yybegin(ST_IN_SCRIPTING);
				registerComment();
				cleanMore();
			}
			case 296:
				break;
			case 54: {
				return symbol(PhpSymbols.T_DNUMBER, "T_DNUMBER");
			}
			case 297:
				break;
			case 123: {
				int initPos = zzStartRead;
				int pos = zzStartRead;
				int labelLength = length();

				if (text().startsWith("b")) {
					pos++;
					labelLength--;
				}
				pos += 3;

				if (text().endsWith("\r\n")) {
					labelLength -= 5;
				} else {
					labelLength -= 4;
				}
				while (zzBuffer[pos] == ' ' || zzBuffer[pos] == '\t') {
					pos++;
					labelLength--;
				}

				if (zzBuffer[pos] == '\'') {
					pos++;
					yybegin(ST_NOWDOC);
					labelLength -= 2;
				} else {
					if (zzBuffer[pos] == '\"') {
						pos++;
						labelLength -= 2;
					}
					yybegin(ST_HEREDOC);
				}
				this.heredocLabel = text().substring((pos - initPos), (pos - initPos) + labelLength);
				if (labelLength < zzEndRead - zzMarkedPos) {
					int lpos = zzMarkedPos;

					String label = "";
					while (lpos < zzEndRead && isLabelStart(zzBuffer[lpos]) && lpos - zzMarkedPos <= labelLength) {
						label = label + zzBuffer[lpos];
						lpos++;
					}

					if (label.equals(this.heredocLabel)) {
						if (zzBuffer[lpos] == ';') {
							lpos++;
						}

						if (zzBuffer[lpos] == '\n' || zzBuffer[lpos] == '\r') {
							yybegin(ST_END_HEREDOC);
						}
					}

				}

				return symbol(PhpSymbols.T_START_HEREDOC, "T_START_HEREDOC");
			}
			case 298:
				break;
			case 104: {
				return symbol(PhpSymbols.T_ELSE, "T_ELSE");
			}
			case 299:
				break;
			case 40: {
				scanner: while (zzMarkedPos < zzEndRead) {
					switch (zzBuffer[zzMarkedPos - 1]) {
					case '`':
						zzMarkedPos--;
						break scanner;
					case '$':
						if (zzBuffer[zzMarkedPos] == '{' || isLabelStart(zzBuffer[zzMarkedPos])) {
							zzMarkedPos--;
							break scanner;
						}
						break;
					case '{':
						if (zzBuffer[zzMarkedPos] == '$') {
							zzMarkedPos--;
							break scanner;
						}
						break;
					case '\\':
						zzMarkedPos++;
					}
					zzMarkedPos++;
				}

				return symbol(PhpSymbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
			}
			case 300:
				break;
			case 11: {
				return symbol(PhpSymbols.T_PLUS, "T_PLUS");
			}
			case 301:
				break;
			case 8: {
				return symbol(PhpSymbols.T_COLON, "T_COLON");
			}
			case 302:
				break;
			case 80: {
				return symbol(PhpSymbols.T_OR_EQUAL, "T_OR_EQUAL");
			}
			case 303:
				break;
			case 164: {
				return symbol(PhpSymbols.T_FUNC_C, "T_FUNC_C");
			}
			case 304:
				break;
			case 37: {
				scanner: while (zzMarkedPos < zzEndRead) {
					switch (zzBuffer[zzMarkedPos - 1]) {
					case '"':
						zzMarkedPos--;
						break scanner;
					case '$':
						if (zzBuffer[zzMarkedPos] == '{' || isLabelStart(zzBuffer[zzMarkedPos])) {
							zzMarkedPos--;
							break scanner;
						}
						break;
					case '{':
						if (zzBuffer[zzMarkedPos] == '$') {
							zzMarkedPos--;
							break scanner;
						}
						break;
					case '\\':
						zzMarkedPos++;
					}
					zzMarkedPos++;
				}

				return symbol(PhpSymbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
			}
			case 305:
				break;
			case 166: {
				return symbol(PhpSymbols.T_HALT_COMPILER, "T_HALT_COMPILER");
			}
			case 306:
				break;
			case 100: {
				return symbol(PhpSymbols.T_IS_NOT_IDENTICAL, "T_IS_NOT_IDENTICAL");
			}
			case 307:
				break;
			case 124: {
				return symbol(PhpSymbols.T_INT_CAST, "T_INT_CAST");
			}
			case 308:
				break;
			case 42: {
				if (zzMarkedPos > zzEndRead) {
					return null;
				}

				zzMarkedPos--;

				scanner: while (zzMarkedPos < zzEndRead) {
					switch (zzBuffer[zzMarkedPos++]) {
					case '\r':
						if (zzBuffer[zzMarkedPos] == '\n') {
							zzMarkedPos++;
						}
					case '\n':
						int pos = zzMarkedPos;
						String label = "";
						while (pos < zzEndRead && isLabelStart(zzBuffer[pos])) {
							label = label + zzBuffer[pos];
							pos++;
						}

						if (label.equals(this.heredocLabel)) {
							if (pos < zzEndRead && zzBuffer[pos] == ';') {
								pos++;
							}

							if (zzBuffer[pos] == '\r' || zzBuffer[pos] == '\n') {
								yybegin(ST_END_HEREDOC);
								break scanner;
							}
						}
						zzMarkedPos = pos;
					default:
						continue;
					}
				}
				return symbol(PhpSymbols.T_ENCAPSED_AND_WHITESPACE, "T_ENCAPSED_AND_WHITESPACE");
			}
			case 309:
				break;
			case 17: {
				return symbol(PhpSymbols.T_BITWISE_AND, "T_BITWISE_AND");
			}
			case 310:
				break;
			case 82: {
				return symbol(PhpSymbols.T_XOR_EQUAL, "T_XOR_EQUAL");
			}
			case 311:
				break;
			case 156: {
				return symbol(PhpSymbols.T_CLASS_C, "T_CLASS_C");
			}
			case 312:
				break;
			case 27: {
				return symbol(PhpSymbols.T_DOLLAR, "T_DOLLAR");
			}
			case 313:
				break;
			case 71: {
				return symbol(PhpSymbols.T_IS_SMALLER_OR_EQUAL, "T_IS_SMALLER_OR_EQUAL");
			}
			case 314:
				break;
			case 61: {
				return symbol(PhpSymbols.T_LOGICAL_OR, "T_LOGICAL_OR");
			}
			case 315:
				break;
			case 75: {
				yybegin(ST_COMMENT);
				more();
			}
			case 316:
				break;
			case 90: {
				return symbol(PhpSymbols.T_LOGICAL_XOR, "T_LOGICAL_XOR");
			}
			case 317:
				break;
			case 114: {
				return symbol(PhpSymbols.T_FINAL, "T_FINAL");
			}
			case 318:
				break;
			case 161: {
				return symbol(PhpSymbols.T_METHOD_C, "T_METHOD_C");
			}
			case 319:
				break;
			case 143: {
				return symbol(PhpSymbols.T_ARRAY_CAST, "T_ARRAY_CAST");
			}
			case 320:
				break;
			case 4: {
				return symbol(PhpSymbols.T_POINT, "T_POINT");
			}
			case 321:
				break;
			case 126: {
				return symbol(PhpSymbols.T_ENDFOR, "T_ENDFOR");
			}
			case 322:
				break;
			case 88: {
				registerComment();
				cleanMore();
				yypushback(2);
				yybegin(ST_IN_SCRIPTING);
			}
			case 323:
				break;
			case 56: {
				return symbol(PhpSymbols.T_DEC, "T_DEC");
			}
			case 324:
				break;
			case 147: {
				return symbol(PhpSymbols.T_ABSTRACT, "T_ABSTRACT");
			}
			case 325:
				break;
			case 68: {
				return symbol(PhpSymbols.T_PLUS_EQUAL, "T_PLUS_EQUAL");
			}
			case 326:
				break;
			case 70: {
				return symbol(PhpSymbols.T_IS_NOT_EQUAL, "T_IS_NOT_EQUAL");
			}
			case 327:
				break;
			case 9: {
				return symbol(PhpSymbols.T_ASSIGN, "T_ASSIGN");
			}
			case 328:
				break;
			case 136: {
				return symbol(PhpSymbols.T_INCLUDE, "T_INCLUDE");
			}
			case 329:
				break;
			case 157: {
				return symbol(PhpSymbols.T_ENDDECLARE, "T_ENDDECLARE");
			}
			case 330:
				break;
			case 103: {
				return symbol(PhpSymbols.T_ECHO, "T_ECHO");
			}
			case 331:
				break;
			case 118: {
				return symbol(PhpSymbols.T_CLASS, "T_CLASS");
			}
			case 332:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					zzDoEOF();
					{
						return new java_cup.runtime.Symbol(PhpSymbols.EOF);
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
